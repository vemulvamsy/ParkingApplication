<?xml version="1.0" encoding="UTF-8"?>
<record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_snc_vehicle_park.ParkingUtils</api_name>
        <client_callable>true</client_callable>
        <description/>
        <name>ParkingUtils</name>
        <script><![CDATA[var ParkingUtils = Class.create();
ParkingUtils.prototype = Object.extendsObject(global.AbstractAjaxProcessor, {
	
	getParkingSlot : function(){
		var user_id = this.getParameter('sysparm_user');
		var user = this.getUserDetails(user_id);
		var parking_slot = this.getParkingBay(user.user_type);
		var obj = {};
		if(parking_slot == ''){
			obj.slot = '';
			obj.entry_time = '';
			obj.user_name = user.name.toString();
			obj.vehicle_number = '';
			obj.msg = "Oh! Sorry, No Parking Slot Available";
		}else{
			var isUserParked = this.getUserParkingStatus(user_id);
			gs.info('isUserParked: '+isUserParked,'park');
			if(isUserParked == false){
				var entry_time = new GlideDateTime();
				var gr = new GlideRecord('x_snc_vehicle_park_parking');
				gr.initialize();
				gr.user = user_id;
				gr.parked_on = entry_time;
				gr.slot_number = parking_slot;
				gr.insert();


				obj.slot = parking_slot.toString();
				obj.entry_time = entry_time.toString();
				obj.user_name = user.name.toString();
				obj.msg = '';
				obj.vehicle_number = user.vehicle_number.toString();
				this.setAllottedStatus(parking_slot,true);
			}else{
				obj.slot = '';
				obj.entry_time = '';
				obj.user_name = user.name.toString();
				obj.msg = 'Already you have parked your vehicle';
				obj.vehicle_number = user.vehicle_number.toString();
			}
				
		}
		gs.info("final obj: "+JSON.stringify(obj),"park");
		return new global.JSON().encode(obj);
		
		
	},
	releaseParkingSlot : function(){
		var obj = {};
		var parking_time;
		var exit_time;
		var user_id = this.getParameter('sysparm_user');
		var gr = new GlideRecord('x_snc_vehicle_park_parking');
		gr.addQuery('user',user_id);
		gr.orderByDesc('sys_created_on');
		gr.setLimit(1);
		gr.query();
		if(gr.next()){
			if(gr.removed_on == '' || gr.removed_on == null){
				exit_time = new GlideDateTime();
				var parking_slot = gr.slot_number;
				gr.removed_on = exit_time;
				parking_time = this.getTotalParkingTime(exit_time,gr.parked_on);
				gr.update();
				this.setAllottedStatus(parking_slot,false);

				obj.time = parking_time.toString();
				obj.exit_time = exit_time.toString();
				obj.msg = '';
			}else{
				obj.time = '';
				obj.exit_time = '';
				obj.msg = 'You have taken your vehicle out already';
			}				
		}else{
			obj.time = '';
			obj.exit_time = '';
			obj.msg = 'You have not parked any vehicle!';
		}
		return new global.JSON().encode(obj);
	},
	getTotalParkingTime : function(exit_time,parked_on){
		var gdt1 = new GlideDateTime(exit_time);
		var gdt2 = new GlideDateTime(parked_on);

		var dur = GlideDateTime.subtract(gdt2, gdt1);
		return dur.getDisplayValue();
	},
	getUserParkingStatus : function(user_id){
		var gr = new GlideRecord('x_snc_vehicle_park_parking');
		gr.addQuery('user',user_id);
		gr.orderByDesc('sys_created_on');
		gr.setLimit(1);
		gr.query();
		if(gr.next()){
			if(gr.removed_on == '' || gr.removed_on == null){
				return true;
			}
			return false;
		}
		return false;
	},
	setAllottedStatus : function(slot,status){
		var gr = new GlideRecord('x_snc_vehicle_park_parking_slots');
		gr.addQuery('slot_number',slot);
		gr.query();
		if(gr.next()){
			gr.setValue('alloted',status);
			//gr.alloted = status;
			gr.update();
		}
	},
	getUserDetails : function(user){
		gs.info("get user details:"+user,"park");
		var gr = new GlideRecord('x_snc_vehicle_park_registerd_users_for_parking');
		gr.addQuery('sys_id',user);
		gr.addActiveQuery();
		gr.query();
		if(gr.next()){
			var obj = {};
			obj.name = gr.user_name.toString();
			obj.vehicle_number = gr.vehicle_number.toString();
			obj.user_type = gr.user_type.toString();
			return obj;
		}
	},
	getParkingBay : function(user_type){
		var gr = new GlideRecord('x_snc_vehicle_park_parking_slots');
		gr.addQuery('alloted',false);
		gr.orderBy('sys_updated_on');
		gr.addQuery('type',user_type);
		gr.setLimit(1);
		gr.query();
		if(gr.next()){
			return gr.slot_number;
		}else{
			return '';
		}
	},
	
	getDummyText : function(msg){
		return msg;
	},
	
    type: 'ParkingUtils'
});]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>vamshi.vemula</sys_created_by>
        <sys_created_on>2018-10-09 14:27:59</sys_created_on>
        <sys_id>19a1566ddb4d6b00f186fc1ebf961907</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>ParkingUtils</sys_name>
        <sys_package display_value="vehicle parking" source="x_snc_vehicle_park">679a81d9db056b00f186fc1ebf961916</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="vehicle parking">679a81d9db056b00f186fc1ebf961916</sys_scope>
        <sys_update_name>sys_script_include_19a1566ddb4d6b00f186fc1ebf961907</sys_update_name>
        <sys_updated_by>vamshi.vemula</sys_updated_by>
        <sys_updated_on>2018-10-09 14:27:59</sys_updated_on>
    </sys_script_include>
</record_update>
